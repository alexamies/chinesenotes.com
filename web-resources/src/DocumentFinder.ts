/*
 * Licensed  under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *  @fileoverview  JavaScript functions for sending and displaying search
 * results for words in either the title or body of documents.
 */
import { DocumentFinderView } from "../src/DocumentFinderView";
import { HrefVariableParser } from "./HrefVariableParser";

export class DocumentFinder {
  public readonly NO_INPUT_MSG = "Please enter search criteria";
  private view: DocumentFinderView;
  private httpRequest: XMLHttpRequest;

  /**
   * Initialize the app to accept document search form events
   * @param {DocumentFinderView} view - To display status and results
   */
  constructor(view: DocumentFinderView) {
    this.view = view;
    this.httpRequest = new XMLHttpRequest();
  }

  /**
   * Initialize the app to accept document search form events
   */
  public init() {
    console.log("DocumentFinder constructor");
    const findForm = document.getElementById("findAdvancedForm");
    const findInput = document.getElementById("findInput");
    if (findForm && findInput) {
      findForm.onsubmit = (event) => {
        this.submitSearchRequest(event);
      };
    }
    // Function for sending and displaying search results, redirected from
    // collection pages
    const href = window.location.href;
    const parser = new HrefVariableParser();
    if (href.includes("&")) {
      const query = parser.getHrefVariable(href, "text");
      if (findInput && findInput instanceof HTMLInputElement) {
        findInput.value = query;
      }
      const col = parser.getHrefVariable(href, "collection");
      let action = "/findadvanced";
      if (findForm && findForm instanceof HTMLFormElement &&
          !findForm.action.endsWith("#")) {
        action = findForm.action;
      }
      let url = action + "/?query=" + query;
      if (col) {
        url = action + "/?query=" + query + "&collection=" + col;
      }
      this.makeSearchRequest(url);
    }
  }

  /**
   * Sends AJAX request to server
   * @param {string} url - The URL to send the request to
   */
  private makeSearchRequest(url: string) {
    console.log("makeSearchRequest: url = " + url);
    if (!this.httpRequest) {
      this.httpRequest = new XMLHttpRequest();
      if (!this.httpRequest) {
        this.view.showMessage("Cannot connect to the server");
        return;
      }
    }
    this.httpRequest.onreadystatechange = () => {
      this.alertSearchContents(this.httpRequest);
    };
    this.httpRequest.open("GET", url);
    this.httpRequest.send();
    this.view.showMessage("Searching ...");
  }

  /**
   * Respond to a document search form submit event
   * @param {Event} event - Generated by form submit
   */
  private submitSearchRequest(event: Event) {
    event.preventDefault();
    const findForm = document.getElementById("findAdvancedForm");
    const findInput = document.getElementById("findInput");
    let query = "";
    if (findInput && findInput instanceof HTMLInputElement) {
      query = findInput.value;
    }
    if (query === "") {
      this.view.showMessage(this.NO_INPUT_MSG);
      return false;
    }
    console.log(`DocumentFinder.submitSearchRequest query: ${query}`);
    const collectionInput = document.getElementById("findInCollection");
    if (collectionInput && collectionInput instanceof HTMLInputElement) {
      // Searching from a collection page, redirect to advanced search
      let col = "";
      col = collectionInput.value;
      const url = "/advanced_search.html#?text=" + query +
          "&collection=" + col;
      window.location.href = url;
      return false;
    }
    const redirectToFull = document.getElementById("redirectToFullText");
    if (redirectToFull) {
      // Searching from a collection page, redirect to advanced search
      if (collectionInput && collectionInput instanceof HTMLInputElement) {
        const url1 = "/advanced_search.html#?text=" + query +
            "&fulltext=true" + collectionInput.value;
        window.location.href = url1;
        return false;
      }
    }
    let action = "/findadvanced";
    if (findForm && findForm instanceof HTMLFormElement &&
        !findForm.action.endsWith("#")) {
      action = findForm.action;
    }
    const url2 = action + "/?query=" + query;
    this.makeSearchRequest(url2);
    return false;
  }

  /**
   * Process the results of an AJAX request
   */
  private alertSearchContents(httpRequest: XMLHttpRequest) {
    if (httpRequest.readyState === XMLHttpRequest.DONE) {
      if (httpRequest.status === 200) {
        console.log("DocumentFinger. alertSearchContents: successful response");
        // console.log(httpRequest.responseText);
        const obj = JSON.parse(httpRequest.responseText);
        this.view.addSearchResults(obj);
      }
    } else {
      this.view.showMessage("There was a problem with the request");
    }
  }
}
